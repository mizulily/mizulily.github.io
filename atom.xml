<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elaine&#39;s Notebook</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-20T03:33:34.022Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Elaine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程命名规范</title>
    <link href="http://yoursite.com/2019/08/20/knowledge/know-naming-rule/"/>
    <id>http://yoursite.com/2019/08/20/knowledge/know-naming-rule/</id>
    <published>2019-08-20T03:03:51.000Z</published>
    <updated>2019-08-20T03:33:34.022Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>匈牙利命名法</strong>(Hungarian Notation)<br>匈牙利命名法是微软内部一个匈牙利人发起使用的，随后逐渐在微软内部流行起来并推广给了全世界的Windows开发人员。<br>其主要思想是：在变量和函数名中加入前缀，以增进人们对程序的理解。<br>常用前缀一览：<br> b   -&gt;  boolean<br> ch  -&gt;  char<br> f   -&gt;  float/flag<br> db  -&gt;  double<br> dw  -&gt;  double word<br> i   -&gt;  int/index<br> c   -&gt;  count of items<br> p   -&gt;  pointer<br> a   -&gt;  array<br> s   -&gt;  string<br> st  -&gt;  structure<br> fn  -&gt;  function<br> h   -&gt;  handle<br> m   -&gt;  member<br> g   -&gt;  global<br> l   -&gt;  local</p></li><li><p><strong>驼峰命名法</strong>(Camel-case Notation)<br>小驼峰命名法第一个单词首字母小写，其他单词首字母大写。<br>大驼峰命名法每个单词都大写，也称<strong>帕斯卡命名法</strong>(Pascal Notation / Upper Camel-case)。</p></li><li><p><strong>下划线命名法</strong>(Under-score-case Notation)<br>每个单词都用下划线分割，这种方法在C语言和UNIX环境中非常普遍。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;匈牙利命名法&lt;/strong&gt;(Hungarian Notation)&lt;br&gt;匈牙利命名法是微软内部一个匈牙利人发起使用的，随后逐渐在微软内部流行起来并推广给了全世界的Windows开发人员。&lt;br&gt;其主要思想是：在变量和函数名中加入前缀，
      
    
    </summary>
    
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
      <category term="notation" scheme="http://yoursite.com/tags/notation/"/>
    
  </entry>
  
  <entry>
    <title>URI统一资源标识符</title>
    <link href="http://yoursite.com/2019/08/08/knowledge/know-uni-resource/"/>
    <id>http://yoursite.com/2019/08/08/knowledge/know-uni-resource/</id>
    <published>2019-08-08T01:43:46.000Z</published>
    <updated>2019-08-08T02:15:47.914Z</updated>
    
    <content type="html"><![CDATA[<p><strong>URI(Uniform Resource Identifier，统一资源标识符)</strong>是用于标识某个互联网资源名称的字符串，允许用户对任何本地和互联网资源通过特定协议进行交互操作。<br>Web上地址的基本形式是URI，它有两种形式：URL和URN，两者是互补的。</p><p><strong>URL(Uniform Resource Locator，统一资源定位符)</strong>提供找到该资源的路径，具体格式为</p><pre><code>[协议名]://[用户名]:[密码]@[服务器地址]:[服务器端口号]/[路径]?[查询字符串]#[片段ID]</code></pre><p>URL的缺点是当信息资源存放地点发生变化时，必须对URL作相应的改变。</p><p><strong>URN(Uniform Resource Name, 统一资源名称)</strong>唯一标识一个实体，与资源的所在地无关，用于在特定的命名空间标识持久性互联网资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;URI(Uniform Resource Identifier，统一资源标识符)&lt;/strong&gt;是用于标识某个互联网资源名称的字符串，允许用户对任何本地和互联网资源通过特定协议进行交互操作。&lt;br&gt;Web上地址的基本形式是URI，它有两种形式：URL和UR
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="internet" scheme="http://yoursite.com/tags/internet/"/>
    
  </entry>
  
  <entry>
    <title>云服务的三种形式</title>
    <link href="http://yoursite.com/2019/08/05/knowledge/know-cloudservice/"/>
    <id>http://yoursite.com/2019/08/05/knowledge/know-cloudservice/</id>
    <published>2019-08-05T02:45:47.000Z</published>
    <updated>2019-08-08T01:45:27.811Z</updated>
    
    <content type="html"><![CDATA[<p>云服务是一个统称，可以分成三大类：</p><ol><li><strong>基础设施服务(IaaS, Infrastructure-as-a-service)</strong></li><li><strong>平台服务(PaaS, Platform-as-a-service)</strong></li><li><strong>软件服务(SaaS, Software-as-a-service)</strong></li></ol><p>假如你是一个餐饮业者，打算做披萨生意，你可以从头到尾，自己生产披萨，但是这样比较麻烦，需要准备的东西多，因此你决定外包一部分工作，采用他人的服务。你有三个方案。</p><p>（1）方案一：IaaS<br>他人提供厨房、炉子、煤气，你使用这些基础设施，来烤你的披萨。</p><p>（2）方案二：PaaS<br>除了基础设施，他人还提供披萨饼皮。你只要把自己的配料洒在饼皮上，让他帮你烤出来就行了。也就是说，你要做的就是设计披萨的味道（海鲜披萨或者鸡肉披萨），他人提供平台服务，让你把自己的设计实现。</p><p>（3）方案三：SaaS<br>他人直接做好了披萨，不用你的介入，到手的就是一个成品。你要做的就是把它卖出去，最多再包装一下，印上你自己的 Logo。</p><p>对应软件开发则是下面这张图：<br><img src="/2019/08/05/knowledge/know-cloudservice/bg2017072307.jpg" alt="SoftwareDevel"></p><p>SaaS是软件开发、管理、部署都交给第三方，不需要关心技术问题，可以拿来即用。普通用户接触到的互联网服务几乎都是SaaS。<br>PaaS提供软件部署平台，抽象掉了硬件和操作系统细节，可以无缝扩展，开发者只需关注自己的业务逻辑，不需要关注底层。<br>IaaS是云服务的最底层，提供一些基础资源，用户需要自己控制底层，实现基础设施的使用逻辑。</p><p>Reference <a href="http://www.ruanyifeng.com/blog/2017/07/iaas-paas-saas.html" target="_blank" rel="noopener">IaaS，PaaS，SaaS 的区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;云服务是一个统称，可以分成三大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基础设施服务(IaaS, Infrastructure-as-a-service)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;平台服务(PaaS, Platform-as-a-servi
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="cloud" scheme="http://yoursite.com/tags/cloud/"/>
    
      <category term="service" scheme="http://yoursite.com/tags/service/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机系统》笔记</title>
    <link href="http://yoursite.com/2019/08/01/note/note-csapp/"/>
    <id>http://yoursite.com/2019/08/01/note/note-csapp/</id>
    <published>2019-08-01T06:00:21.000Z</published>
    <updated>2019-08-08T01:46:22.538Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>知识产权初级培训</title>
    <link href="http://yoursite.com/2019/05/28/training/train-intproperty/"/>
    <id>http://yoursite.com/2019/05/28/training/train-intproperty/</id>
    <published>2019-05-28T08:09:36.000Z</published>
    <updated>2019-05-30T08:37:12.096Z</updated>
    
    <content type="html"><![CDATA[<p><strong>知识产权</strong>是人们就其智力创造的成果依法享有的专有权利。知识产权是一种民事权利，是一种私权。<br>知识产权公认的四个基本特征：</p><ol><li><strong>非物质性</strong>（本质），知识产权的对象是一定的信息，不占有物理空间，是没有形体的财产。</li><li><strong>专有性</strong>，在法定范围内权利人享有禁止他人未经许可的实施使用和不与他人分享的权利。</li><li><strong>地域性</strong>，依照一个国家（或地区）法律取得的知识产权，仅在该地域内有效。</li><li><strong>时间性</strong>，知识产权仅在法律规定的期限内有效，一旦期满即丧失专有权。</li></ol><p>需要强调的是，</p><p>我国《民法总则》（2017年10月1日施行）第123条规定：民事主体依法享有知识产权，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;知识产权&lt;/strong&gt;是人们就其智力创造的成果依法享有的专有权利。知识产权是一种民事权利，是一种私权。&lt;br&gt;知识产权公认的四个基本特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;非物质性&lt;/strong&gt;（本质），知识产权的对象是一定的信息，不占有物
      
    
    </summary>
    
      <category term="training" scheme="http://yoursite.com/categories/training/"/>
    
    
      <category term="intellectual property" scheme="http://yoursite.com/tags/intellectual-property/"/>
    
  </entry>
  
  <entry>
    <title>《代码不朽》笔记</title>
    <link href="http://yoursite.com/2019/05/20/note/note-maintain/"/>
    <id>http://yoursite.com/2019/05/20/note/note-maintain/</id>
    <published>2019-05-20T06:20:39.000Z</published>
    <updated>2019-05-31T00:30:48.536Z</updated>
    
    <content type="html"><![CDATA[<p><strong>《代码不朽：编写可维护软件的10大要则》 作者：（荷）Joost Visser 翻译：张若飞 电子工业出版社 2016年10月第1版 TP311.5 TP312.8 ISBN: 978-7-121-29898-1 </strong><br>本书从大量实践项目中提取出了编写可维护软件的10个最佳原则，不仅可以用来测量软件的质量和可维护性，还可以指导编写出高质量的代码。本书一一介绍了这些原则，提供了翔实的代码示例，能够让读者了解到如何对代码进行重构从而满足这些原则，提高可维护性。<br><a id="more"></a></p><h1><span id="软件质量的8个特征">软件质量的8个特征</span></h1><p>可维护性、功能可适性、性能效率、兼容性、可使用性、可靠性、安全性、可移植性</p><h1><span id="软件维护的4种方式">软件维护的4种方式</span></h1><ol><li>纠正性维护：发现并修复Bug</li><li>适应性维护：适应操作环境的改变</li><li>完善性维护：用户提出新的需求或之前的需求有变化</li><li>预防性维护：改进质量或用户方可能产生的Bug</li></ol><h1><span id="软件可维护性原则">软件可维护性原则</span></h1><h2><span id="1-编写短小的代码单元">1. 编写短小的代码单元</span></h2><ul><li>代码单元的长度应该限制在15行以内</li><li>短小的代码易于理解、测试和重用</li></ul><p>重构技巧：<br>1) 提取方法，进一步分解为多个更小的单元<br>2) 将方法替换为方法对象， 避免新的单元参数过多</p><h2><span id="2-编写简单的代码单元">2. 编写简单的代码单元</span></h2><h2><span id="3-不写重复代码">3. 不写重复代码</span></h2><h2><span id="4-保持代码单元的接口简单">4. 保持代码单元的接口简单</span></h2><h2><span id="5-分离模块之间的关注点">5. 分离模块之间的关注点</span></h2><h2><span id="6-架构组件松耦合">6. 架构组件松耦合</span></h2><h2><span id="7-保持架构组件之间的平衡">7. 保持架构组件之间的平衡</span></h2><h2><span id="8-保持小规模代码库">8. 保持小规模代码库</span></h2><h2><span id="9-自动化开发部署和测试">9. 自动化开发部署和测试</span></h2><h2><span id="10-编写简洁的代码">10. 编写简洁的代码</span></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;《代码不朽：编写可维护软件的10大要则》 作者：（荷）Joost Visser 翻译：张若飞 电子工业出版社 2016年10月第1版 TP311.5 TP312.8 ISBN: 978-7-121-29898-1 &lt;/strong&gt;&lt;br&gt;本书从大量实践项目中提取出了编写可维护软件的10个最佳原则，不仅可以用来测量软件的质量和可维护性，还可以指导编写出高质量的代码。本书一一介绍了这些原则，提供了翔实的代码示例，能够让读者了解到如何对代码进行重构从而满足这些原则，提高可维护性。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://yoursite.com/categories/note/"/>
    
    
      <category term="software development" scheme="http://yoursite.com/tags/software-development/"/>
    
      <category term="maintain" scheme="http://yoursite.com/tags/maintain/"/>
    
  </entry>
  
  <entry>
    <title>强制删除数据库</title>
    <link href="http://yoursite.com/2019/04/24/tip/tip-drop-database/"/>
    <id>http://yoursite.com/2019/04/24/tip/tip-drop-database/</id>
    <published>2019-04-24T03:25:01.000Z</published>
    <updated>2019-04-24T03:39:41.502Z</updated>
    
    <content type="html"><![CDATA[<p>在SQL Server Management Studio中删除数据库时提示无法删除(Cannot drop database databasename because it is currently in use)。这是因为在操作数据库中出现了问题，如打开数据库连接后未正确关闭等。<br>解决方案是运行如下脚本：</p><pre><code>USE [master]GOALTER DATABASE database_nameSET SINGLE_USER WITH ROLLBACK IMMEDIATE --将数据库回滚到原始配置状态GODROP DATABASE database_name--删除数据库GO</code></pre><p>Reference <a href="https://blog.csdn.net/mx5721/article/details/8057542" target="_blank" rel="noopener">mx5721的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SQL Server Management Studio中删除数据库时提示无法删除(Cannot drop database databasename because it is currently in use)。这是因为在操作数据库中出现了问题，如打开数据库连接后未正
      
    
    </summary>
    
      <category term="tip" scheme="http://yoursite.com/categories/tip/"/>
    
    
      <category term="SQL Server" scheme="http://yoursite.com/tags/SQL-Server/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>TTL字段</title>
    <link href="http://yoursite.com/2019/04/17/knowledge/know-ttl/"/>
    <id>http://yoursite.com/2019/04/17/knowledge/know-ttl/</id>
    <published>2019-04-17T06:43:33.000Z</published>
    <updated>2019-04-17T06:54:11.101Z</updated>
    
    <content type="html"><![CDATA[<p>TTL全称是<strong>生存时间</strong>(Time-to-Live)，在IP和ICMP协议中均包含该字段。<br>当我们对网络上的主机进行ping操作的时候，我们本地机器会发出一个数据包，数据包经过一定数量的路由器传送到目的主机，但是由于很多的原因，一些数据包不能正常传送到目的主机，那如果不给这些数据包一个生存时间的话，这些数据包会一直在网络上传送，导致网络开销的增大。当数据包传送到一个路由器之后，TTL就自动减1，如果减到0了还是没有传送到目的主机，那么就自动丢失。<br>最新的Windows系统初始值为TTL=128，Linux系统初始值为TTL=64/255。在进行ping操作时，返回的TTL是经过路由递减后的TTL，因此若ping返回的TTL=51，那么可以推测到目的主机经过了64-51=13个路由，且目的主机可能为Linux系统。<br>可以使用tracert命令查看到达目标主机经过的所有路由节点，通常超过30个节点还没有完成跟踪的网站被认为是无法访问的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TTL全称是&lt;strong&gt;生存时间&lt;/strong&gt;(Time-to-Live)，在IP和ICMP协议中均包含该字段。&lt;br&gt;当我们对网络上的主机进行ping操作的时候，我们本地机器会发出一个数据包，数据包经过一定数量的路由器传送到目的主机，但是由于很多的原因，一些数据包
      
    
    </summary>
    
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>windows三个内置账户</title>
    <link href="http://yoursite.com/2019/04/17/knowledge/know-win-builtin/"/>
    <id>http://yoursite.com/2019/04/17/knowledge/know-win-builtin/</id>
    <published>2019-04-17T01:39:01.000Z</published>
    <updated>2019-04-17T01:53:24.186Z</updated>
    
    <content type="html"><![CDATA[<p>Windows中处于安全性考虑有三个由操作系统创建的、较为特别的内置账户或组，主要作为系统服务或进程运行账户，与通常的用户账户没有任何关联，分别为Local System、Network Service和Local Service。</p><ol><li><p>Local System账户，全名为NT AUTHORITY\SYSTEM，预设拥有本机所有权限，当它访问网络资源时是作为计算机的域账户使用的。</p></li><li><p>Network Service账户，全名为NT AUTHORITY\NETWORK SERVICE，预设拥有本机部分权限，它能以计算机的名义访问网络资源，并根据实际环境把访问凭据提交给远程计算机。</p></li><li><p>Local Service账户，全名为NT AUTHORITY\LOCAL SERVICE，预设拥有本机最小权限，并在网络凭证中具有匿名身份</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Windows中处于安全性考虑有三个由操作系统创建的、较为特别的内置账户或组，主要作为系统服务或进程运行账户，与通常的用户账户没有任何关联，分别为Local System、Network Service和Local Service。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Loca
      
    
    </summary>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="system management" scheme="http://yoursite.com/tags/system-management/"/>
    
  </entry>
  
  <entry>
    <title>并发编程</title>
    <link href="http://yoursite.com/2019/04/01/knowledge/know-concurrent/"/>
    <id>http://yoursite.com/2019/04/01/knowledge/know-concurrent/</id>
    <published>2019-04-01T01:48:49.000Z</published>
    <updated>2019-04-17T01:40:06.019Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="并发编程的三个模型">并发编程的三个模型</span></h2><ol><li><p>IO多路复用(Multiplexing)<br>也称为事件驱动模型，在单一进（线）程上下文中处理多个IO数据流，每个逻辑流都能访问该进（线）程的全部地址空间，适合处理很多闲置的IO。</p></li><li><p>多进程<br>每个逻辑控制流都是一个进程，由内核来调度和维护，每个进程由独立的虚拟地址空间，想要和其他进程通信，必须使用某种显式的进程间通信机制(Interprocess communication, IPC)。</p></li><li><p>多线程<br>线程运行在单一进程中，所有运行在同一个进程中的线程共享整个虚拟地址空间，包括代码、数据、堆栈等。线程间逻辑控制方式简单，但受限于2GB地址空间，线程之间的同步和加锁比较麻烦，一个线程的崩溃可能影响到整个程序的稳定性。</p></li><li><p>协程？</p></li></ol><h2><span id="进程间通信方式">进程间通信方式</span></h2><ol><li><p>管道(Pipe)</p></li><li><p>系统IPC<br>包括消息队列、信号、共享存储等。</p></li><li><p>套接字(Socket)</p></li></ol><h2><span id="线程间通信方式">线程间通信方式</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;并发编程的三个模型&quot;&gt;并发编程的三个模型&lt;/span&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;IO多路复用(Multiplexing)&lt;br&gt;也称为事件驱动模型，在单一进（线）程上下文中处理多个IO数据流，每个逻辑流都能访问该进（线）程的全部地址空间，适合处
      
    
    </summary>
    
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
      <category term="concurrent" scheme="http://yoursite.com/tags/concurrent/"/>
    
      <category term="process" scheme="http://yoursite.com/tags/process/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>WLAN关闭随机物理地址</title>
    <link href="http://yoursite.com/2019/03/28/tip/tip-rand-mac/"/>
    <id>http://yoursite.com/2019/03/28/tip/tip-rand-mac/</id>
    <published>2019-03-28T02:22:37.000Z</published>
    <updated>2019-03-28T03:07:07.441Z</updated>
    
    <content type="html"><![CDATA[<p>在Win 10中打开“网络和Internet”，在左侧选择“WLAN”，点击“硬件属性”，可以查看WLAN网卡的物理地址(MAC)。<br>发现WLAN无线网卡的物理地址会根据所连接的网络发生变化。<br>实际上这是由于系统打开了对于WLAN的<strong>随机硬件地址</strong>功能，该功能使他人不能轻易获取本机的MAC地址来跟踪位置，如果需要固定的MAC地址进行绑定时要将该功能关闭。<br>当没有无线网络连接时，下方“随机硬件地址”栏点击关闭，此时MAC地址将固定不变。<br>当连接到某个无线网络时，点击网络名称，进入此网络的设置，同样在“随机硬件地址”栏下选择关闭，随后断开并重新连接该无线网络，此时MAC地址将固定不变。<br>由于后一项设置针对当前网络连接，因此从安全方面考虑仅在常用的无线网络中关闭该项设置即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Win 10中打开“网络和Internet”，在左侧选择“WLAN”，点击“硬件属性”，可以查看WLAN网卡的物理地址(MAC)。&lt;br&gt;发现WLAN无线网卡的物理地址会根据所连接的网络发生变化。&lt;br&gt;实际上这是由于系统打开了对于WLAN的&lt;strong&gt;随机硬件地址&lt;
      
    
    </summary>
    
      <category term="tip" scheme="http://yoursite.com/categories/tip/"/>
    
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="WLAN" scheme="http://yoursite.com/tags/WLAN/"/>
    
      <category term="MAC" scheme="http://yoursite.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>软件开发术语汇总</title>
    <link href="http://yoursite.com/2019/03/12/review/rev-softwaredev/"/>
    <id>http://yoursite.com/2019/03/12/review/rev-softwaredev/</id>
    <published>2019-03-12T04:45:21.000Z</published>
    <updated>2019-03-13T03:18:00.973Z</updated>
    
    <content type="html"><![CDATA[<p><strong>架构</strong> 就是指人们根据自己对世界的认识，为解决某个问题，主动地、有目的地去识别问题，并进行分解、合并，解决这个问题的实践活动。<br>软件架构，就是将客户的不同需求抽象成为抽象组件，并且能够描述这些抽象组件之间的通信和调用。它不仅涉及到结构与行为，而且还涉及到系统的使用，功能，性能，适应性，重用性，可理解性，经济性和技术约束的权衡和美学考虑。</p><p><strong>框架</strong>是一个提供了诸多服务，供开发人员进行二次开发，实现具体功能的应用系统，是可被应用开发者定制的应用骨架。<br>框架不是架构，框架比架构更具体，更偏重于技术，而架构偏重于设计。一个架构可以通过多种框架来实现。</p><p><strong>模式</strong>是指从生产经验和生活经验中经过抽象和升华提炼出来的核心知识体系。模式（Pattern）其实就是解决某一类问题的方法论。软件设计模式强调的是一个设计问题的解决方法，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。<br>一个架构中可能会出现多个设计模式来解决多个问题。</p><p><strong>模块</strong>是一个通用概念，可能从功能或其他目的来区分。程序模块，是指的一段能够实现某个有价值目标的的成员代码段。功能模块的说法一般在分析和设计阶段出现得比较频繁，一个功能模块来表示一组功能的集合。模块的定义原则应该是：<strong>高内聚</strong>和<strong>低耦合</strong></p><p><strong>组件</strong>是面向对象里面的一个重用的概念，也称为<strong>构件</strong>，是一个具象的概念，是封装了一个或多个程序模块的实体。组件强调的是封装，利用接口进行交互。因为封装有不同层次的封装，对应不同层次的接口，在谈论组件的时候一定要分辨清楚谈论的层次和范围。</p><p><strong>插件</strong>是满足一定接口规范的具有一定功能的程序模块，通过和应用程序的互动，来替应用程序增加一些特定的功能。开发者可以在自己软件系统中设计相应的接口以匹配某个插件，也可以设计一定的接口规范，来让别人开发插件。<br>插件是是组件的一个子类，就是将组件中具有某些特点的组件归为插件，这些特点是：益于与系统分离，接口明晰，可以替换的程序模块。</p><p><strong>控件</strong>可视化的组件。</p><p><strong>中间件</strong>提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。</p><p>Reference<br><a href="https://www.cnblogs.com/doit8791/p/6129963.html" target="_blank" rel="noopener">软件架构、框架、模式、模块、组件、插件概念汇总</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;架构&lt;/strong&gt; 就是指人们根据自己对世界的认识，为解决某个问题，主动地、有目的地去识别问题，并进行分解、合并，解决这个问题的实践活动。&lt;br&gt;软件架构，就是将客户的不同需求抽象成为抽象组件，并且能够描述这些抽象组件之间的通信和调用。它不仅涉及到结构与
      
    
    </summary>
    
      <category term="review" scheme="http://yoursite.com/categories/review/"/>
    
    
      <category term="software development" scheme="http://yoursite.com/tags/software-development/"/>
    
      <category term="term" scheme="http://yoursite.com/tags/term/"/>
    
  </entry>
  
  <entry>
    <title>加密算法和数字证书</title>
    <link href="http://yoursite.com/2019/03/06/knowledge/know-encryption/"/>
    <id>http://yoursite.com/2019/03/06/knowledge/know-encryption/</id>
    <published>2019-03-06T05:17:22.000Z</published>
    <updated>2019-03-06T06:52:16.832Z</updated>
    
    <content type="html"><![CDATA[<p><strong>对称加密</strong>是指加密与解密使用同样的密钥，安全性取决于密钥长度。密钥大小要考虑安全性和效率的权衡，一般小于256bit。对称加密的一大缺点是密钥的管理和分配， 将密钥发送到请求方的过程中有很大风险会被拦截。常用的对称加密算法有DES和AES。</p><p><strong>非对称加密</strong>使用了一对密钥，公钥发送给任何请求它的人，私钥由自己保管。与对称加密相比，非对称加密安全性大大提高，但是效率很低。常用的非对称加密算法是RSA。<br><strong>公钥</strong>与<strong>私钥</strong>成对出现，公钥用来加密和验章，私钥用来解密和签章，用公钥加密的内容只能用私钥解密，用私钥加密的内容只能用公钥解密。<br>当用户接受文件时，对方用该用户的公钥加密，该用户用自己的私钥解密，保证该信息只能由他看到，即安全传输。<br>当用户发送文件时，用自己的私钥签名，对方用该用户的公钥解密，保证信息是由该用户发出的，即<strong>数字签名</strong>。签名加密的内容与文件内容有关时，可以验证文件内容在发送过程中未被修改。</p><p>为了弥补对称加密的安全性问题和非对称加密的效率问题，通常采用两者结合的方式，将对称加密的密钥通过非对称加密发送出去。<br><img src="/2019/03/06/knowledge/know-encryption/DES+RSA.jpg" alt="encryption"></p><p>CA(Certificate Authority)即证书授权中心，是负责管理和签发证书的第三方机构，一般来说CA具有足够的权威性，是所有行业和公众认可的。证书授权中心将申请者的公钥、申请者和颁发者信息以及自己的签名一起用自己的私钥加密，生成<strong>数字证书</strong>。发送方只需将数字证书附上，接收方使用CA的公钥解密数字证书，得到发送方的真实公钥，避免公钥和数字签名被篡改。<br>颁发者和使用者相同的证书为<strong>自签名证书</strong>。<strong>根证书</strong>是CA给自己颁发的证书，是信任链的起始点，安装CA根证书意味着对这个CA的信任。</p><p>证书的编码格式通常有PEM（base64编码）和DER（二进制编码）。</p><ul><li>.crt .cer 证书文件</li><li>.key 私钥文件</li><li>.csr 证书签名请求</li><li>.pfx .keystore 包含证书和私钥（需要密码）</li></ul><p>在Windows中可以通过在命令提示符中输入certmgr打开证书管理工具。</p><p>Reference<br><a href="https://zhuanlan.zhihu.com/p/31477508" target="_blank" rel="noopener">知乎专栏——公钥和私钥</a><br><a href="https://songlee24.github.io/2015/05/03/public-key-and-private-key/" target="_blank" rel="noopener">理解公钥和私钥</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;对称加密&lt;/strong&gt;是指加密与解密使用同样的密钥，安全性取决于密钥长度。密钥大小要考虑安全性和效率的权衡，一般小于256bit。对称加密的一大缺点是密钥的管理和分配， 将密钥发送到请求方的过程中有很大风险会被拦截。常用的对称加密算法有DES和AES。&lt;
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="encryption" scheme="http://yoursite.com/tags/encryption/"/>
    
      <category term="certification" scheme="http://yoursite.com/tags/certification/"/>
    
  </entry>
  
  <entry>
    <title>开源软件协议</title>
    <link href="http://yoursite.com/2019/02/28/knowledge/know-opensource/"/>
    <id>http://yoursite.com/2019/02/28/knowledge/know-opensource/</id>
    <published>2019-02-28T00:46:32.000Z</published>
    <updated>2019-02-28T03:20:57.160Z</updated>
    
    <content type="html"><![CDATA[<p>现今存在的开源软件协议很多，而经过Open Source Initiative 组织通过批准的开源协议目前有60多种（<a href="http://www.opensource.org/licenses/alphabetical" target="_blank" rel="noopener">http://www.opensource.org/licenses/alphabetical</a> ）。</p><p>要分清楚不同的开源协议，需要了解以下基本概念。<br><strong>贡献者</strong>指对开源项目提供了代码的人或实体，按照贡献的先后又可分为创始人和参与者；<strong>获取者</strong>是指开源项目的使用者。<br><strong>源代码</strong>是指由各种语言写成的未经编译的程序文本；<strong>目标代码</strong>是指经过编译后生成类似“类库”的程序，提供各种接口给他人使用的代码，如dll, jar等。<br><strong>衍生模块</strong>是指依托或包含开源代码而产生的代码；<strong>独立模块</strong>是指参考或借助开源代码开发出来的独立的、不包含或依赖源代码的功能模块。</p><p><img src="/2019/02/28/knowledge/know-opensource/opensource.png" alt="licenses"></p><p>在OSI网站上被列为主流及被广泛使用的许可有：</p><ol><li><p>Apache License, 2.0 (<strong>Apache</strong>-2.0)<br>允许使用者以其他协议形式修改和重新发布代码，允许闭源商业发布和销售，同时鼓励代码共享和尊重原作者著作权。</p></li><li><p>Berkerly Software Distribution (<strong>BSD</strong> 3-Clause, BSD 2-Clause)<br>允许使用者以其他协议形式修改和重新发布代码，允许闭源商业发布和销售，同时鼓励代码共享和尊重原作者著作权。</p></li><li><p>General Public Licese (<strong>GPL</strong>)<br>源代码和目标代码免费使用，但修改或衍生的代码不允许作为闭源的商业软件发布和销售，同时修改或衍生的代码必须采用同样的GPL许可证。</p></li><li><p>Lesser General Public Licese (<strong>LGPL</strong>)<br>允许商业软件通过目标代码引用的方式使用LGPL类库而不需要开源，但是修改或新增的额外代码必须采用LGPL协议，因此适合作为第三方类库引用，而不适合做二次开发。</p></li><li><p>MIT license (<strong>MIT</strong>)<br>允许修改、使用甚至出售MIT协议的代码，但是必须在发行版里包含原许可协议的声明。</p></li><li><p>Mozilla Public License 2 (<strong>MPL</strong>v2)<br>允许免费重发布、修改和使用，但要求修改后的代码版权归软件的发起者，围绕该软件的所有代码版权都集中在发起者手中。</p></li><li><p>Common Development and Distribution License (<strong>CDDL</strong>-1.0)<br>MPL的扩展协议，允许公共版权使用，无专利费并提供专利保护，可集成于商业软件中，允许自行发布许可。</p></li><li><p>Eclipse Public License (<strong>EPL</strong>-1.0)<br>允许任意使用、分发、修改及修改后闭源二次商业发布，但必须声明商业发布的源代码或目标代码的原始版本时可以获取的，并告知获取方法。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现今存在的开源软件协议很多，而经过Open Source Initiative 组织通过批准的开源协议目前有60多种（&lt;a href=&quot;http://www.opensource.org/licenses/alphabetical&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="open source" scheme="http://yoursite.com/tags/open-source/"/>
    
      <category term="license" scheme="http://yoursite.com/tags/license/"/>
    
  </entry>
  
  <entry>
    <title>职业技能培训</title>
    <link href="http://yoursite.com/2019/02/28/training/train-career/"/>
    <id>http://yoursite.com/2019/02/28/training/train-career/</id>
    <published>2019-02-28T00:46:18.000Z</published>
    <updated>2019-02-28T00:51:24.229Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="社交行为风格">社交行为风格</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;社交行为风格&quot;&gt;社交行为风格&lt;/span&gt;&lt;/h2&gt;
      
    
    </summary>
    
      <category term="training" scheme="http://yoursite.com/categories/training/"/>
    
    
      <category term="career" scheme="http://yoursite.com/tags/career/"/>
    
      <category term="skill" scheme="http://yoursite.com/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>Windows中工作组、域及账户</title>
    <link href="http://yoursite.com/2018/12/26/knowledge/know-wkgp-dm-acc/"/>
    <id>http://yoursite.com/2018/12/26/knowledge/know-wkgp-dm-acc/</id>
    <published>2018-12-26T06:53:13.000Z</published>
    <updated>2019-04-01T01:54:31.837Z</updated>
    
    <content type="html"><![CDATA[<p>局域网上的资源需要管理，<strong>工作组</strong>和<strong>域</strong>是两种不同的资源管理模式。</p><ol><li><p>工作组<br>工作组(Workgroup)是松散的管理方式，每台计算机管理员只能管理本地计算机，没有统一查找网络资源的机制，也没有统一的用户账户身份验证机制，用户（本地或远程）登录该计算机只能使用本机的用户账户来验证身份，是较小规模计算机网络的组织形式。计算机安装操作系统后，默认属于WORKGROUP工作组。</p></li><li><p>域<br>域(Domain)是相对严格的组织，至少有一台服务器负责每台连入局域网的电脑和用户的验证工作，称为<strong>域控制器</strong>。域控制器中包含了这个域的账户、密码、计算机信息等构成的数据库，仅当局域网计算机的域、账号、密码都正确时可以访问域中的资源，否则以对等网用户的方式访问共享资源。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;局域网上的资源需要管理，&lt;strong&gt;工作组&lt;/strong&gt;和&lt;strong&gt;域&lt;/strong&gt;是两种不同的资源管理模式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;工作组&lt;br&gt;工作组(Workgroup)是松散的管理方式，每台计算机管理员只能管理本地计算机，没有统一查找网络
      
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="system management" scheme="http://yoursite.com/tags/system-management/"/>
    
  </entry>
  
  <entry>
    <title>单方ping不通的防火墙设置</title>
    <link href="http://yoursite.com/2018/12/19/tip/tip-ping-icmp/"/>
    <id>http://yoursite.com/2018/12/19/tip/tip-ping-icmp/</id>
    <published>2018-12-19T02:47:05.000Z</published>
    <updated>2018-12-24T06:11:13.680Z</updated>
    
    <content type="html"><![CDATA[<p>A与B在同一子网内，B可以ping通A，但A却ping不通B。关闭B防火墙后可以ping通。</p><p>原因：ICMP被B的防火墙禁止了<br>解决办法：防火墙-&gt;高级设置-&gt;入站规则，开启“文件与打印机共享（回显请求-ICMPv4-In）”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A与B在同一子网内，B可以ping通A，但A却ping不通B。关闭B防火墙后可以ping通。&lt;/p&gt;
&lt;p&gt;原因：ICMP被B的防火墙禁止了&lt;br&gt;解决办法：防火墙-&amp;gt;高级设置-&amp;gt;入站规则，开启“文件与打印机共享（回显请求-ICMPv4-In）”&lt;/p&gt;

      
    
    </summary>
    
      <category term="tip" scheme="http://yoursite.com/categories/tip/"/>
    
    
      <category term="ping" scheme="http://yoursite.com/tags/ping/"/>
    
      <category term="firewall" scheme="http://yoursite.com/tags/firewall/"/>
    
  </entry>
  
  <entry>
    <title>《Oracle精髓》笔记</title>
    <link href="http://yoursite.com/2018/12/12/note/note-oracle/"/>
    <id>http://yoursite.com/2018/12/12/note/note-oracle/</id>
    <published>2018-12-12T03:02:57.000Z</published>
    <updated>2018-12-12T08:37:06.836Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><!-- tocstop --><p>《Oracle精髓》第五版 O’Reilly系列 机械工业出版社</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;!-- tocstop --&gt;
&lt;p&gt;《Oracle精髓》第五版 O’Reilly系列 机械工业出版社&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://yoursite.com/categories/note/"/>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>解除虚拟机占用</title>
    <link href="http://yoursite.com/2018/12/10/tip/tip-vm-using/"/>
    <id>http://yoursite.com/2018/12/10/tip/tip-vm-using/</id>
    <published>2018-12-10T07:35:14.000Z</published>
    <updated>2018-12-24T06:11:35.064Z</updated>
    
    <content type="html"><![CDATA[<p>打开虚拟机时提示“该虚拟机似乎正在使用中。如果该虚拟机未在使用，请按‘获取所有权(T)’按钮获取它的所有权。否则，请按‘取消(C)’按钮以防损坏”。</p><p>这是由于虚拟机未正常关闭引起的，打开存放该虚拟机的目录，删除.lck文件夹即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开虚拟机时提示“该虚拟机似乎正在使用中。如果该虚拟机未在使用，请按‘获取所有权(T)’按钮获取它的所有权。否则，请按‘取消(C)’按钮以防损坏”。&lt;/p&gt;
&lt;p&gt;这是由于虚拟机未正常关闭引起的，打开存放该虚拟机的目录，删除.lck文件夹即可。&lt;/p&gt;

      
    
    </summary>
    
      <category term="tip" scheme="http://yoursite.com/categories/tip/"/>
    
    
      <category term="virtual machine" scheme="http://yoursite.com/tags/virtual-machine/"/>
    
      <category term="VMWare" scheme="http://yoursite.com/tags/VMWare/"/>
    
  </entry>
  
  <entry>
    <title>《趣学CCNA》笔记</title>
    <link href="http://yoursite.com/2018/10/30/note/note-ccna/"/>
    <id>http://yoursite.com/2018/10/30/note/note-ccna/</id>
    <published>2018-10-30T01:30:10.000Z</published>
    <updated>2019-02-27T06:31:41.480Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><!-- toc --><ul><li><a href="#522-ip地址分类">5.2.2 IP地址分类</a></li></ul><!-- tocstop --><h3><span id="522-ip地址分类">5.2.2 IP地址分类</span></h3><p>IPv4定义了5种地址类型，分别为A至E类。</p><p><strong>A类地址</strong>是最高位为0的地址，换算成十进制就是0.x.x.x~127.x.x.x之间的地址都属于A类地址，A类地址的前8位二进制数（第一段）是网络位。<br><strong>B类地址</strong>是最高两位为10的地址，换算成十进制就是128.x.x.x~191.x.x.x都属于B类地址，B类地址的前16位二进制数（第一、第二段）是网络位。<br><strong>C类地址</strong>是最高三位为110的地址，换算成十进制就是192.x.x.x~223.x.x.x都属于C类地址，C类地址的前24位二进制数（第一、第二、第三段）是网络位。<br><strong>D类地址</strong>是最高四位为1110的地址，换算成十进制就是224.x.x.x~239.x.x.x都属于D类地址，也就是<strong>组播地址</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#522-ip地址分类&quot;&gt;5.2.2 IP地址分类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h3&gt;&lt;span id=&quot;522-ip地址分类&quot;&gt;5.2.2 I
      
    
    </summary>
    
      <category term="note" scheme="http://yoursite.com/categories/note/"/>
    
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
</feed>
